Parameters:
  Region:
    Type: String 
    Default: "us-west-2" 

  AccountId:
    Type: String 
    Default: "495679467660"

  LambdaName: 
    Type: String 
    Default: "391_Lambda"

  TableName:
    Type: String 
    Default: "391_Table"

Resources:
  # Need: API gateway, API gateway method, maybe need API gateway resource, labmda function, dynamodb table

  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      # ApiKeySourceType: String (will need this eventually)
      Description: "Rest API for our 391 project"
      EndpointConfiguration: 
          Types: 
          - REGIONAL
      Name: "391_API"
      Tags: 
        - 
          Key: "Use_Category"
          Value: "CPEN391"
  apiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: False
      AuthorizationType: NONE
      # AuthorizerId: String
      HttpMethod: POST
      Integration: 
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: 
          Fn::Sub: "arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${Region}:${AccountId}:function:${LambdaName}/invocations"
      OperationName:
        Ref: LambdaName
      ResourceId: 
        Fn::GetAtt: [apiGateway, RootResourceId]
      RestApiId:
        Ref: apiGateway

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - apiMethod
    Properties:
      RestApiId: 
        Ref: apiGateway
      StageName: "call"

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - lambdaFunction
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: 
        Fn::Sub: arn:aws:lambda:${Region}:${AccountId}:function:${LambdaName} # [lambdaFunction, Arn]
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: "arn:aws:execute-api:${Region}:${AccountId}:${apiGateway}/*/POST/"

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          import json
          import boto3

          def handler(event, context):
            event = json.loads(event['body'])

            try: 
              username = event['username']
              phone_number = event['phone_number']
              game_result = event['game_result']
            except Exception as e:
              return {
                'statusCode': 400,
                'body': json.dumps("Malformed request. POST payload should contain username, phone number, and game_result.")
              }

            dynamodb = boto3.resource('dynamodb')
            table = dynamodb.Table('391_Table')
            
            user = {}
            
            try: 
                user = table.get_item(Key={"username": username})['Item']
                
                if game_result == "w":
                    user['wins'] = str(int(user['wins']) + 1)
                elif game_result == "l":
                    user['losses'] = str(int(user['losses']) + 1)
                else:
                    user['ties'] = str(int(user['ties']) + 1)
                    
            except Exception as e:
                print(e)
                user = {
                    "username": username,
                    "phone_number": phone_number,
                    "wins": "1" if game_result == "w" else "0",
                    "losses": "1" if game_result == "l" else "0",
                    "ties": "1" if game_result == "t" else "0",
                }
                
            table.put_item(Item=user)
            
            return {
                'statusCode': 200,
                'body': json.dumps(user)
            }
      Description: "The Lambda function to handle our backend logic."
      FunctionName: 
        Ref: LambdaName
      Handler: "index.handler"
      Role: 
        Fn::GetAtt: [lambdaIAMRole, Arn]
      Runtime: python3.6
      Tags: 
        - 
          Key: "Use_Category"
          Value: "CPEN391"


  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - Fn::Sub: "arn:aws:logs:${Region}:${AccountId}:log-group:/aws/lambda/${LambdaName}:*"
              - Action:
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"
                Effect: "Allow"
                Resource:
                  - Fn::Sub: "arn:aws:dynamodb:${Region}:${AccountId}:table/${TableName}"
          PolicyName: 
            Ref: LambdaName

  dynamodbTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: "username"
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
        - AttributeName: "username"
          KeyType: HASH
      TableName:
        Ref: TableName
      Tags: 
        - 
          Key: "Use_Category"
          Value: "CPEN391"

Outputs:
  APIInvokeURL:
    Description: The url for our project to hit.
    Value: 
      Fn::Sub: "https://${apiGateway}.execute-api.${Region}.amazonaws.com/call/"